# -------------------------------------------------------------------------
# AUTHOR: Aditya Dhar
# FILENAME: bagging_random_forest.py
# SPECIFICATION: Create a decision tree, ensemble and random forest model for handwriting recognition
# FOR: CS 4210- Assignment #3
# TIME SPENT: 3 hours
# -----------------------------------------------------------*/

# IMPORTANT NOTE: DO NOT USE ANY ADVANCED PYTHON LIBRARY TO COMPLETE THIS CODE SUCH AS numpy OR pandas. You have to work here only with standard vectors and arrays

# importing some Python libraries
import csv
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = []  # this array will be used to count the votes of each classifier

# reading the training data from a csv file and populate dbTraining
with open("optdigits.tra", 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        if i > 0:  # skipping the header
            dbTraining.append(row)

# reading the test data from a csv file and populate dbTest
with open("optdigits.tes", 'r') as csvfile:
    reader = csv.reader(csvfile)
    for i, row in enumerate(reader):
        dbTest.append(row)

# inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
for _ in dbTest:
    classVotes.append([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

print("Started my base and ensemble classifier ...")

for k in range(
        20):  # we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample
    # populate the values of X_training and y_training by using the bootstrapSample
    bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)
    X_training = []
    y_training = []
    for sample in bootstrapSample:
        X_training.append(sample[:64])
        y_training.append(sample[64])

    # fitting the decision tree to the data
    clf = tree.DecisionTreeClassifier(criterion='entropy',
                                      max_depth=None)  # we will use a single decision tree without pruning it
    clf = clf.fit(X_training, y_training)

    count = 0
    correct = 0

    for i, testSample in enumerate(dbTest):

        # make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
        # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
        # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
        # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
        # this array will consolidate the votes of all classifier for all test samples
        actual = testSample[64]
        prediction = int(clf.predict([testSample[:64]])[0])

        classVotes[i][int(prediction)] += 1

        if k == 0:  # for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
            count += 1
            if int(actual) == int(prediction):
                correct += 1

    if k == 0:  # for only the first base classifier, print its accuracy here
        accuracy = correct / count
        print("Finished my base classifier (fast but relatively low accuracy) ...")
        print("My base classifier accuracy: " + str(accuracy))
        print("")

print(classVotes)
# now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together)
correct = 0
count = 0
for i in range(len(classVotes)):
    # print(classVotes[i])
    prediction = classVotes[i]
    highestIndex = 0
    for j in range(len(prediction)):
        if prediction[j] > prediction[highestIndex]:
            highestIndex = j
    # print(highestIndex)
    count += 1
    if int(highestIndex) == int(dbTest[i][64]):
        correct += 1

accuracy = correct / count

# printing the ensemble accuracy here
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")

# Create a Random Forest Classifier
clf = RandomForestClassifier(n_estimators=20)  # this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

# Fit Random Forest to the training data
clf.fit(X_training, y_training)

correct = 0
count = 0

# make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
for i, testSample in enumerate(dbTest):

    # make the classifier prediction for each test sample and update the corresponding index value in classVotes. For
    # instance, if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,
    # 0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0]. Later, if your second base classifier predicted 3 for the
    # first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0] Later,
    # if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,
    # 0] will change to classVotes[0,0,1,2,0,0,0,0,0,0] this array will consolidate the votes of all classifier for
    # all test samples
    actual = testSample[64]
    prediction = int(clf.predict([testSample[:64]])[0])

    classVotes[i][int(prediction)] += 1 # for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy

    count += 1
    if int(actual) == int(prediction):
        correct += 1

accuracy = correct / count

# printing Random Forest accuracy here
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
